#!/usr/bin/env build

exit_cleanup()
{
	ret=$?

	if [ ${ret} -ne 0 ]; then
		echo "error: compile failed for ${CATEGORY}/${NAME}" >&2
		echo "logfile: '${PKG_LOGFILE}'" >&2
		exit ${ret}
	fi
	exit 0
}
trap exit_cleanup EXIT

build_compile()
{
	if [ -f "configure" ]; then
		./configure	--host="${CHOST}"			\
				--prefix="/usr" --mandir=/usr/share/man	\
				--docdir=/usr/share/doc			\
				--sysconfdir=/etc			\
				${CONFIG_OPTS}
	fi

	make ${MAKE_OPTS}
	make DESTDIR="${D}" install
}
pkg_compile() { build_compile; }

load_rules "${1}"

# Declare compilation variables before loading the rules as the package may
# potentially overwrite this data, in particular the toolchain data is usually
# rewritten within the toolchain/buildtools rule.
echo "compiling: ${1}"
eval "$(build-query --toolchain "${CHOST}")"
mkenv "compile"
PKG_LOGFILE="${L}/compile.log"

# pkgconfig can be a right pita...
PKG_CONFIG_LIBDIR="${SYSROOT}/usr/share/pkgconfig:${SYSROOT}/usr/lib/pkgconfig"
PKG_CONFIG_SYSROOT_DIR="${SYSROOT}"
export PKG_CONFIG_LIBDIR PKG_CONFIG_PATH
export PKG_CONFIG_SYSROOT_DIR

# Don't pass along the builder jobcontrol data to child processes
unset MAKEFLAGS

load_rules "${1}"

## Prep the build environment
# Technically much of this should have been done in build-prep, and this sort
# of duplication of work may be useful to make a function within the top-level
# build script.  Perhaps builder_mkenv [prep|compile|archive|etc..]

## Build the source and install it into the DESTDIR
# Ironically this is the heart of what the build-engine does, and yet it has
# been reduced to the simplest component of the entire system.
cd "${S}"
pkg_compile >> "${PKG_LOGFILE}" 2>&1

## Save Space!
# At this point everything important should be installed into ${D}, and any
# form of reruning the build will remove ${S} before prepping it for build, so
# we might as well gut it now.  About the best option we could do would be to
# avoid gutting this when being run in --debug mode.
find "${S}" -delete &

##
# Generate the file index.  This is done as a 0 delimited file stored within
# the destination filesystem.  This allows for easy checking of the installed
# data as well as easy removal of individual binary packages from the sysroot.
mkdir -p "${D}/var/db/binpkgs/${CATEGORY}"
binpkg_list="$(mktemp "${T}/binpkg.XXXXXXXX")"
if [ ! -e "${binpkg_list}" ]; then
	die "failed to create package inventory"
fi
cd "${D}"
for dir in man usr/man usr/share/man; do
	test -d "${dir}" || continue
	for file in `find "${dir}" -regex '.*[1-9]$'`; do
		if test -f "${file}"; then
			gzip -c -9 "${file}" > "${file}.gz" && rm "${file}"
		elif test -h "${file}"; then
			mv "${file}" "${file}.gz"
		fi
	done
	wait
done
wait
find * -depth \( ! -type d \) -print0 > "${binpkg_list}"
mv "${binpkg_list}" "${D}/var/db/binpkgs/${CATEGORY}/${NAME}"

# vim: filetype=sh
