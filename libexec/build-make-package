#!/usr/bin/env build

ARCHIVE_TMP1=
ARCHIVE_TMP2=
exit_cleanup()
{
	ret=$?

	if [ ${ret} -ne 0 ]; then
		echo "error: archiving failed for ${CATEGORY}/${NAME}" >&2
		echo "logfile: '${PKG_LOGFILE}'" >&2
		exit ${ret}
	fi
	if [ -f "${ARCHIVE_TMP1}" ]; then
		rm -f "${ARCHIVE_TMP1}"
	fi
	if [ -f "${ARCHIVE_TMP2}" ]; then
		rm -f "${ARCHIVE_TMP2}"
	fi
	exit 0
}
trap exit_cleanup EXIT

echo "archiving: ${1}"
load_rules "${1}"
mkenv "archive"
PKG_LOGFILE="${L}/archive.log"

ARCHIVE_TMP1="$(mktemp "${BUILDER_TMPDIR}/${NAME}-${VERSION}-${RELEASE}.XXXXXXXX")"
ARCHIVE_TMP2="$(mktemp "${BUILDER_TMPDIR}/${NAME}-${VERSION}-${RELEASE}.XXXXXXXX")"

[ -f "${ARCHIVE_TMP1}" ] || die "failed to create temporary archive for package '${NAME}'"
[ -f "${ARCHIVE_TMP2}" ] || die "failed to create temporary archive for package '${NAME}'"

case "${ARCHIVE_FORMAT}" in
(tbz2|tar.bz2)	ARCHIVE_COMPRESSOR="bzip2 -cv";;
(tgz|tar.gz)	ARCHIVE_COMPRESSOR="gzip -cv";;
(*)		die "unsupported archive format '${ARCHIVE_FORMAT}'";;
esac

if [ ! -d "${BUILDER_ATFDIR}/${CATEGORY}" ]; then
	mkdir -p "${BUILDER_ATFDIR}/${CATEGORY}"
fi

cd "${D}"
tar -cvf "${ARCHIVE_TMP1}" .  > "${PKG_LOGFILE}" 2>&1
${ARCHIVE_COMPRESSOR} "${ARCHIVE_TMP1}" > "${ARCHIVE_TMP2}" 2>> "${PKG_LOGFILE}"
if [ -f "${BUILDER_ATFDIR}/${CATEGORY}/${NAME}-${VERSION}-${RELEASE}.${ARCHIVE_FORMAT}" ]; then
	rm -f "${BUILDER_ATFDIR}/${CATEGORY}/${NAME}-${VERSION}-${RELEASE}.${ARCHIVE_FORMAT}"
fi
mv -v "${ARCHIVE_TMP2}" "${BUILDER_ATFDIR}/${CATEGORY}/${NAME}-${VERSION}-${RELEASE}.${ARCHIVE_FORMAT}" >> "${PKG_LOGFILE}" 2>&1
cd "${W}"
find "${D}" -delete &

##
# Technically everything should be done but we did throw a number of things
# into the background during execution, so go ahead and wait to see if anything
# is stil going.
wait

# vim: filetype=sh
